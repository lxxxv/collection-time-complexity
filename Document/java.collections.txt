\\ : interface
\  : abstract

Collections
├─ Deque\\
│  ├─ ArrayDeque
├─ Dictionary\\
│  ├─ Hashtable : {"Thread-Safe (O)", "키와 값이 1:1", "null (X)", "elements (O)", "iterator (O)"}
├─ Iterator\\
│  ├─ ListIterator\\
├─ List\\
│  ├─ AbstractList\
│  │  ├─ AbstractSequentialList\
│  │  │  ├─ LinkedList : {"Thread-Safe (X)"}
│  │  ├─ ArrayList : {"Thread-Safe (X)"}
│  │  ├─ Vector : {"Thread-Safe (O)"}
│  ├─ CopyOnWriteArrayList : {"Thread-Safe (O)", "List를 읽기 위해 어딘가에 전달할 때 복사본을 만들어서 전달", "데이터 수정이나 삭제 등의 다른 용도로 쓰일 경우에는 속도가 느려지기 때문에 수정할 일은 거의 없으며 주로 순회가 일어나는 용도로 사용하는 것이 적합하다."}
├─ Map\\
│  ├─ AbstractMap\
│  │  ├─ EnumMap : {"Thread-Safe (X)"}
│  │  ├─ HashMap : {"Thread-Safe (X)", "키와 값이 1:1", "null (O)", "elements (X)", "iterator (O)", "HashMap은 보조해시를 사용하기 때문에 HashTable에 비해서 해시 충돌(Hash Collision)이 덜 발생"}
│  │  │  ├─ LinkedHashMap : {"Thread-Safe (X)"}
│  │  ├─ IdentityHashMap : {"Thread-Safe (X)"}
│  │  ├─ WeakHashMap : {"Thread-Safe (X)"}
│  ├─ ConcurrentMap\\
│  │  ├─ ConcurrentHashMap : {"Thread-Safe (O)", " + HashMap"}
│  ├─ SortedMap\\
│  │  ├─ NavigableMap\\
│  │  │  ├─ ConcurrentNavigableMap\\
│  │  │  │  ├─ ConcurrentSkipListMap : {"Thread-Safe (X)"}
│  │  │  ├─ TreeMap : {"Thread-Safe (X)"}
├─ Queue\\
│  ├─ AbstractQueue\
│  │  ├─ ConcurrentLinkedQueue
│  │  ├─ PriorityQueue
│  ├─ BlockingQueue\\
│  │  ├─ ArrayBlockingQueue
│  │  ├─ DelayQueue
│  │  ├─ LinkedBlockingQueue
│  │  ├─ SynchronousQueue
│  │  ├─ TransferQueue\\
│  │  │  ├─ LinkedTransferQueue
│  │  ├─ PriorityBlockingQueue
├─ Set\\
│  ├─ AbstractSet\
│  │  ├─ CopyOnWriteArraySet
│  │  ├─ EnumSet\
│  │  │  ├─ JumboEnumSet
│  │  │  ├─ RegularEnumSet
│  │  ├─ HashSet
│  │  │  ├─ LinkedHashSet
│  ├─ SortedSet\\
│  │  ├─ NavigableSet\\
│  │  │  ├─ ConcurrentSkipListSet
│  │  │  ├─ TreeSet